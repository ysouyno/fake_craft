#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: fake_craft 开发记录
#+date: <2024-09-25 周三>
#+author: ysouyno
#+email:
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.4 (Org mode 9.6.15)
#+cite_export:

* <2024-09-25 周三>

尝试从零开始实现一下 [[https://github.com/fogleman/Craft][Craft]]，因为 [[https://github.com/minetest/minetest][minetest]] 体量太大，入手困难。

从第一个 ~commit~ 开始，首先要解决编译问题，所以我下载了两个依赖库：

+ [[file:files/glfw-2.7.8.bin.WIN32.zip][glfw-2.7.8.bin.WIN32.zip]]
+ [[file:files/glew-1.9.0-win32.zip][glew-1.9.0-win32.zip]]

~glfw~ 自带二进制的 ~lib~ 文件最高只支持到 ~vs2012~ ，所以我选择了 ~vs2010~ 做为编译环境，为了编译通过，将原来的 ~.c~ 后缀改为 ~.cpp~ 。

目前只配置了 ~x86~ 编译，未支持 ~x64~ ，添加如下依赖库：

#+begin_src text
  GLFW.lib
  opengl32.lib
  glew32.lib
#+end_src

首次运行的效果如下：

#+ATTR_HTML: :width 60%
[[file:files/20240925_0.png]]

回到家，在真正的 ~vs2010~ 上添加工程，却提示：

#+ATTR_HTML: :width 60%
[[file:files/20240925_1.png]]

所以，只好重新创建并设置了一下工程。

关于 ~vertex.sl~ 中 ~rotationMatrix~ 函数，就是沿哪个轴旋转，代码中沿 ~Y~ 轴的效果如下：

#+ATTR_HTML: :width 60%
[[file:files/20240925_2.gif]]

一直到 ~instanced~ 这个 ~commit~ ，我感觉作者可能在尝试各种函数的效果，比如目前的效果：

#+ATTR_HTML: :width 60%
[[file:files/20240925_3.gif]]

* <2024-09-26 周四>

对昨天抄写的代码的理解：

1. ~g_vertex_buffer_data[72];~ 一开始是 ~24~ 个大小，后来由于要同时显示三个立方体，所以改成了 ~72~ ，为什么要用 ~24~ ？因为一个立方体需要 ~8~ 个点来确定，每个点有三个值表示它的空间坐标，所以要完全表达一个立方体至少要 ~3 * 8 = 24~ 个大小。
2. ~void make_cube(float* output, float x, float y, float z, float n)~ 函数是什么意思？ ~output~ 是返回值，即上个问题的 ~g_vertex_buffer_data~ 变量， ~x~ ， ~y~ ， ~z~ 表示立方体的正中心， ~n~ 表示正中心离三个面的距离，所以 ~make_cube~ 生成的立方体的边长是 ~2n~ 。
3. ~rotationMatrix~ 这个函数是做什么的？可以参考《LearnOpenGL CN》教程中的：“[[https://learnopengl-cn.github.io/01%20Getting%20started/07%20Transformations/#_18][旋转]]”，即：

#+ATTR_HTML: :width 80%
[[file:files/20240926_0.png]]

同时有些新问题：

1. ~rotationMatrix(vec3(1, 0, 0), gl_InstanceID * 0.2)~ 这里为什么要这么写？ ~gl_InstanceID~ 是个啥？为什么它要沿 ~x~ 轴旋转？
2. 这个矩阵的用处是啥？我知道如果是最后一列的话，表示 ~位移~ 。

#+begin_src glsl
return mat4(
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    t.x, t.y, t.z, 1.0
);
#+end_src

目前 ~81 instanced cubes~ 效果如下：

#+ATTR_HTML: :width 60%
[[file:files/20240926_1.gif]]
